{"version":3,"sources":["co-map.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;iBAewB,GAAG;IAfpB,EAAE,sCAAM,IAAI;;AAeJ,SAAS,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE;AACnC,SAAO,EAAE,CAAC,aAAc;AACtB,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC9C,YAAM,CAAC,IAAI,EACT,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC;KACxB;AACD,WAAO,MAAM,CAAC;GACf,CAAC,CAAC;CACJ","file":"co-map.js","sourceRoot":"/source/","sourcesContent":["import co from 'co';\n/**\n * @function\n *  @param {array} array - The array to iterate over\n *  @param {function} - The generator function\n *    usage: yield map(arr, fn) would return the resulting array asynchronously\n */\n//export default function * map(arr, fn) {\n//  var result = [];\n//  for (var i = 0, len = arr.length; i < len; i++) {\n//    result.push(yield fn(arr[i], i));\n//  }\n//  return result;\n//}\n\nexport default function map(arr, fn) {\n  return co(function * () {\n    var result = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n      result.push(\n        yield fn(arr[i], i));\n    }\n    return result;\n  });\n}\n"]}