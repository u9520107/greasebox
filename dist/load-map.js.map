{"version":3,"sources":["load-map.js"],"names":[],"mappings":";;;;;;IAAO,OAAO,2BAAM,UAAU;;IACvB,IAAI,2BAAM,QAAQ;;IAClB,EAAE,2BAAM,IAAI;;IACZ,IAAI,2BAAM,MAAM;;IAChB,KAAK,2BAAM,OAAO;;;;;AAKzB,SAAS,OAAO,CAAC,GAAG,EAAE;AACpB,MAAI,CAAC,GAAG,EAAE;AACR,OAAG,GAAG,MAAM,CAAC;GACd;AACD,SAAO,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5C,QAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AACjB,UAAI,EAAE,CAAC;KACR,MAAM;AACL,UAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAE,yBAAC;YACG,OAAO,EACP,GAAG;;;;AADH,qBAAO,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG;;;qBAGjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;;;;;;;qBACL,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;;;AAA7C,iBAAG,GAAG,IAAI,CAAC,KAAK;;;;AAEhB,iBAAG,GAAG;AACJ,uBAAO,EAAE,CAAC;AACV,oBAAI,EAAE,IAAI,CAAC,QAAQ;AACnB,qBAAK,EAAE,EAAE;AACT,wBAAQ,EAAE,EAAE;AACZ,uBAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;AACxB,8BAAc,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7C,0BAAU,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;eAC3D,CAAC;;AAEJ,kBAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,kBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,kBAAI,EAAE,CAAC;;;;;;AAEP,qBAAO,CAAC,GAAG,OAAM,KAAK,CAAC,IAAI,CAAE,SAAS,CAAE,wCAAoC,KAAK,CAAC,GAAG,CAAE,IAAI,CAAC,IAAI,CAAE,CAAG,CAAC;AACtG,kBAAI,gBAAK,CAAC;;;;;;OAEb,EAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ;iBACc,OAAO","file":"load-map.js","sourceRoot":"/source/","sourcesContent":["import through from 'through2';\nimport cofs from './cofs';\nimport co from 'co';\nimport path from 'path';\nimport chalk from 'chalk';\n\n/**\n * @function loadMap\n */\nfunction loadMap(ext) {\n  if (!ext) {\n    ext = '.map';\n  }\n  return through.obj(function (file, enc, next) {\n    if (file.isNull()) {\n      next();\n    } else {\n      var self = this;\n      co(function* () {\n        var mapFile = file.path + ext;\n        var map;\n        try {\n          if (yield cofs.exists(mapFile)) {\n            map = JSON.parse(yield cofs.readFile(mapFile));\n          } else {\n            map = {\n              version: 3,\n              file: file.relative,\n              names: [],\n              mappings: '',\n              sources: [file.relative],\n              sourcesContent: [file.contents.toString(enc)],\n              sourceRoot: '/' + path.relative(file.cwd, file.base) + '/'\n            };\n          }\n          file.sourceMap = map;\n          self.push(file);\n          next();\n        } catch (err) {\n          console.log(`[${ chalk.cyan( 'loadMap' ) }] Failed to load source map for ${chalk.red( file.path )}`);\n          next(err);\n        }\n      });\n    }\n  });\n}\nexport default loadMap;\n"]}